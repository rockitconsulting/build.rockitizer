import java.util.*;
import java.net.URI;
import java.nio.file.Path;
import java.nio.file.*;
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream
import java.util.zip.ZipFile
import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

/*
*	Copyright 2015 rockit.consulting GbR  (www.rockit.consulting)
*
*/


ext {
		 
}



def enhanceProjWithJar(dir) {
	def files = []
	logger.info "[build:rockITizer] checking project ${dir} for java enhancement"
    dir.eachFileRecurse(groovy.io.FileType.FILES) { clz ->
	    if( clz.name.endsWith('.class') ) {
	    	files << clz
	    }
	}
    if(files.size()>0) {
    	def jarFile = "${dir}${File.separator}${dir.name}.jar"
    	file(jarFile).createNewFile()
    	logger.lifecycle "[build:rockITizer] creating ${jarFile}"
    	JarOutputStream  jarOs = new JarOutputStream (new FileOutputStream( jarFile ))
		
		files.each { clz ->
			logger.info "[build:rockITizer] adding ${clz} to ${jarFile} under package ${dir.toPath().relativize( clz.toPath() ).toFile().path.replace('\\','/')}"
			jarOs.putNextEntry( new JarEntry( dir.toPath().relativize( clz.toPath() ).toFile().path.replace('\\','/') ) )
			jarOs << clz.bytes
			jarOs.closeEntry()
		}
		
      	jarOs.close()
    	
    	
    }
}


task prepareJavaForBars() << {
   
   def enhancementDirs = []
   barToProjects.each { bar, prj ->
    	logger.info "[build:rockITizer] enhancing from ${brokerProjectsTargetDir}${fileSeparator}${bar}"
    	
    	file("${brokerProjectsTargetDir}${fileSeparator}${bar}").eachFile ( groovy.io.FileType.DIRECTORIES) { dir ->  
    		if( !allProjectFolders.contains(dir.name) ) {
    			return
    		} 
    		enhanceProjWithJar(dir)
    	} 
    }
}




