/*
*	Copyright 2015 rockit.consulting GbR  (www.rockit.consulting)
*
*/

ext {
	fileSeparator=System.getProperty('file.separator')
	lineSeparator=System.getProperty('line.separator')
}



loadConfiguration()

def loadConfiguration() { 
    def environment = hasProperty('env') ? env : 'idep'
    project.ext.environment = environment
    
    
    
 	project.ext.configPath= hasProperty('configPath') ? configPath : (projectDir.path+fileSeparator+'conf.sample')
 	println "Environment is set to $environment and -PconfigPath to ${configPath}"
     
 /*
 	if(!hasProperty('configPath')) {
 		 throw new Throwable("-PconfigPath  not set, please provide the Configuration Path of the current Build")
 	}
*/
    
    if(!new File(configPath).exists()) {
    	throw new Throwable("-PconfigPath ${configPath} does  not exist, please provide a valid path")
    }
    
 	
    def configFile = file("${project.ext.configPath}${fileSeparator}Config.groovy")

    if(!configFile.exists()) {
    	throw new Throwable("mandatory Config.groovy file doesn't available ander Build Configuration Path ${configPath}")
    }
    
    def config = new ConfigSlurper("$environment").parse(configFile.toURL())
    
	
    project.ext.configPath=configPath
	/* setting cmd and global parameters */
    project.ext.config = config

    project.ext.deployOverwrite=( hasProperty('deployOverwrite') ? deployOverwrite : config.deployOverwrite ).toBoolean()
    project.ext.deployOverwrite=( hasProperty('enableMonitoring') ? deployOverwrite : config.deployOverwrite ).toBoolean()
    project.ext.parallelExecution=hasProperty('parallelExecution') ? parallelExecution : config.parallelExecution
    project.ext.overrideSourceBars=hasProperty('overrideSourceBars')?true:false
    project.ext.parallel=parallelExecution.toBoolean()?'Parallel':''
    project.ext.decoupled= config.decoupled?'Decoupled':''
 	
 	project.ext.brokerToolkitDir=hasProperty('brokerToolkitDir') ? brokerToolkitDir : config.brokerToolkitDir
 	project.ext.testProjectDir=hasProperty('testProjectDir') ? testProjectDir : config.testProjectDir
    
}

task printConfig (group:'build') << {
    //config.flatten().inject[:] {result, key, value ->
	config.flatten().each {
	   println "$it"	 
    } 
}