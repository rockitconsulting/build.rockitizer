/*
*	Copyright 2015 rockit.consulting GbR  (www.rockit.consulting)
*
*/


ext {
  barFiles = []
  
  brokerConfDir="${configPath}${fileSeparator}bars"
  
  allProjectFolders = []
 
 
 getFileExtension = { fileName ->
    fileName.lastIndexOf('.')>0 ? fileName.substring( fileName.lastIndexOf('.'),fileName.length() ): fileName
 }
  
  getFilesProjects={ workspace, proj, ext, modelMode=false ->
		def files = []
		if(config.deployApplicationName) {
			proj << config.deployApplicationName.split(' ')[0]
		 }
  
	     proj.each { projName ->
	       def projFolder = new File("${brokerProjectsTargetDir}${fileSeparator}${workspace}${fileSeparator}${projName}")
	       if(projFolder&&projFolder.exists()) {
		     	projFolder.eachFileRecurse(groovy.io.FileType.FILES) {
	       		if( ext.contains( getFileExtension(it.name) ) && 
					( modelMode ||  
					( !modelMode &&  !it.name.contains("_SUB")&& !it.name.contains("_sub") && !config.forceFlowExclude.contains(it.name) ) 
				) 
		    )  {
	        		files << new File("${brokerProjectsTargetDir}${fileSeparator}${workspace}${(!modelMode?'':fileSeparator+projName)}").toURI().relativize( it.toURI() ).path.replaceAll("/","\\\\")
	       	 	}
	     	 }
	       }
	     }
	     files.join(' ')
  }
  
  
  barByName =  { barName ->
      	    def barFile = barFiles?.find {it.name == barName }
    	    if(!barFile) {
	    	    throw new  Throwable("no bar ${barName} in folder ${barTargetOut} found. Use <createBars> Task with  <-i> to log the compilation error out !!!")
    	    } 
    	    barFile    	
  }
  
  
  addDependencies =  { projectDescriptions, prjName ->
  
  				if(environment=='idep'){return}
				//keeping the list of projects for java enhancement
				allProjectFolders << prjName
				
				def dependencies = []
				def path = projectDescriptions.find { path -> path.endsWith("${prjName}${File.separator}.project") }
				if(!path) {
					throw new  Throwable("The reference to ${prjName} was found, but project location is not configured. Kindly add the path to the  ${prjName} workspace under Config.groovy -> brokerProjectDirs for Env:${environment}")
				} 
				
				logger.info "[build:rockITizer] discover dependencies: for $prjName using $path"
				
				def projectDescription = new XmlSlurper().parseText(new File(path).text)
				//add sharedLibraryNature as dependency for packaging
				if ( projectDescription.text().contains('com.ibm.etools.msgbroker.tooling.sharedLibraryNature')) {
					logger.info "[build:rockITizer] addDependencies: adding dependency ${prjName}"
					dependencies << prjName
				}
				//check recursive
				projectDescription.projects.'*'.findAll { node ->  node.name() == 'project' }.each { lib ->
					dependencies << addDependencies(projectDescriptions, lib.text())
				}	
				dependencies
	}
  
  
}


/*
*  Init tasks run always
*/


task readProjectStructureFromConfig  {
	def result = [:]
	config.projectToBar.each { projToBars ->
		projToBars.each { prj, bars ->
			bars.each { bar -> 
			   if(!result[bar]) { result[bar] = [] }
		 	   result[bar] <<  prj
		 	}
	 	}
	}
	project.ext.barToProjects=result
	
}



/* create folders, prepare environment */
task prepareBroker (dependsOn:readProjectStructureFromConfig) {
    
	buildDir = new File(buildDir, "${assemblyFileName}.${environment}")
    project.ext.barPropertiesIn=new File(buildDir, "bar.properties${fileSeparator}in")
    project.ext.barPropertiesIn.mkdirs()
    
    project.ext.barPropertiesOut=new File(buildDir, "bar.properties${fileSeparator}out")
    project.ext.barPropertiesOut.mkdirs()
    
    project.ext.barTargetOut=new File(buildDir, "bar.target")
    project.ext.barTargetOut.mkdirs()
    
    project.ext.assemblyOut=new File(buildDir, "assembly")
    project.ext.assemblyOut.mkdirs()
    
    
    
    project.ext.brokerProjectsTargetDir=new File(buildDir,"projects.target")
    project.ext.brokerProjectsTargetDir.mkdirs()
    def bars = []
    barToProjects.each {bar, prj ->
    	new File(brokerProjectsTargetDir, bar).mkdirs()
    	bars << "${bar}.bar"
    }
    project.ext.bars = bars 
    
    
}



task  allProjectFiles  {
		def allProjectFiles = []
		config.brokerProjectDirs.each { dir ->
		    logger.info "-> brokerProjectDirs: directory " + dir
			new File(dir).eachFileRecurse(groovy.io.FileType.FILES) { f -> allProjectFiles << f.path }
		}
		project.ext.allProjectFiles = allProjectFiles
  }
  
  

task  allProjectExtractDependencies  {
		def dependencies = []
		if(config.deployApplicationName) {
			def projectDescriptions = allProjectFiles.findAll { file -> file.endsWith(".project") }
			config.deployApplicationName.tokenize(' ').each { app ->
			  dependencies << addDependencies( projectDescriptions, app.trim() )
			}
			config.deployLibraryName=dependencies.flatten().unique().join(' ')
		}
}




allprojects {
  
  println "######################## Broker Environment ##################################"
  println "# brokerFile            = ${config.broker}" 
  println "# iib libs              = ${projectDir}${fileSeparator}lib"
  println "# barstoProject         = ${barToProjects}"
  println "# projectDirs           = ${config.brokerProjectDirs}"
  println "# buildDir              = ${buildDir}"  
  println "# incrementalDeployment = ${incrementalDeployment}"
  println "# enableMonitoring      = ${enableMonitoring}"
  println "# cleanFlowConfig       = ${cleanFlowConfig}"
//println "# overrideSourceBars    = ${overrideSourceBars}"
//println "# parallelExecution     = ${parallelExecution}"
//println "# parallel              = ${parallel}"
//println "# decoupled             = ${decoupled?:'false'}"
  println "# deployApplicationName = ${config.deployApplicationName?:'No deployApplicationName defined in Config.groovy, proceed in Flows mode'}"
  println "# deployLibraryName     = ${config?.deployLibraryName?:'No shared library dependencies discovered'}"
  println "# assemblyFileName      = ${assemblyFileName}"
  println "# assemblyFileVersion   = ${assemblyFileVersion}"
  println "#############################################################################"
  
}

/*
* end init tasks
*/





task findBarFiles  (dependsOn:readProjectStructureFromConfig) {
	doLast {	
		description 'Pick up the real bars in sources/target folder.'
		def files = []
		def dirs = overrideSourceBars ? config.brokerProjectDirs:[barTargetOut as String]
		dirs.each { dir ->
		   	 new File(dir).eachFileRecurse(groovy.io.FileType.FILES) { f -> files << f }
		}
		project.ext.barFiles = files.findAll{ file -> file.name.endsWith(".bar") }
	}
}




task cleanProjectsTargetDir  {
   doLast {
	   description "Cleans properties workspace and bars"
	   brokerProjectsTargetDir.deleteDir()
	   barTargetOut.deleteDir()
	   brokerProjectsTargetDir.mkdir()
	   barTargetOut.mkdir()
	   assemblyOut.deleteDir()
	   assemblyOut.mkdir()
   }
}




task copyProjectsToBuildTarget(dependsOn: [cleanProjectsTargetDir, prepareBroker]) 

barToProjects.each {bar, prj ->
		config.brokerProjectDirs.eachWithIndex { projDir,idx ->
	
			task "copy${new File(projDir).name.capitalize()}${idx}ToBuildTarget-${bar}-Task"(type:Copy)  {
			    from "${file(projDir).absolutePath}"
				exclude '**/*.metadata','**/*.svn', "**/${file(buildDir).parentFile.name}/**"
			    into ("${brokerProjectsTargetDir}${fileSeparator}${bar}")
			}
	copyProjectsToBuildTarget.dependsOn "copy${new File(projDir).name.capitalize()}${idx}ToBuildTarget-${bar}-Task"			
	}
}