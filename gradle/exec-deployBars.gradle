import com.ibm.broker.config.proxy.*;


apply plugin: 'java'

buildscript {
   dependencies {
      classpath fileTree(dir: 'lib', include: '*.jar')
   }
}

/*
*	Copyright 2015 rockit.consulting GbR  (www.rockit.consulting)
*
*/


def enableMonitoring() { 
					

			def root = new XmlSlurper().parseText(new File("${configPath}/${config.broker}").text)
			logger.lifecycle "[build:rockITizer] Enabling monitoring for BRK  uri://'${root.@host}':'${root.@listenerPort}'"
            BrokerConnectionParameters bcp = new IntegrationNodeConnectionParameters( "${root.@host}".toString() , Integer.valueOf("${root.@listenerPort}") );
        	BrokerProxy b = BrokerProxy.getInstance(bcp);
	        
	        b.getExecutionGroups(null).each { eg ->
	        	eg.getApplications(null).each { app ->
	        	  logger.lifecycle "[build:rockITizer] Enabled monitoring for Application: '${app.name}'"
	        	  app.setAllMessageFlowsRuntimeProperty("This/monitoring", "active");
	        	}
	        	eg.getMessageFlows(null).each { flow -> 
	          	    logger.lifecycle "[build:rockITizer] Enabled monitoring for Flow: '${flow.name}'"
	        		flow.setRuntimeProperty("This/monitoring", "active"); 
	        	}
           }
        
            
}




task deployBars {
	doLast {
		config.barToExecutionGroup.flatten().each { bar, exgroups  ->
		   exgroups.each { exgroup ->
	          if(hasProperty("deployBar-${bar}-${exgroup}")) {
	          	logger.lifecycle ext."deployBar-${bar}-${exgroup}" //captured output from console
	          }
		   }
		}   
		
		
		if( enableMonitoring ) {
			enableMonitoring()
	    }
	}            
}

config.barToExecutionGroup.flatten().each { bar, exgroups  ->
   exgroups.each { exgroup ->
	    task "deployBar-${bar}-${exgroup}" (dependsOn:overrideBars) {
	    	doLast {
			    new ByteArrayOutputStream().withStream { os ->
			        def result = javaexec {
	               	    def cmdArgs = ["-n", "${configPath}${fileSeparator}${config.broker}", "-e", "${exgroup}", "-a","${barByName(bar)}","${!incrementalDeployment?'-m':''}", "-w","600"]
		    			logger.lifecycle "[build:rockITizer] deploy${!incrementalDeployment?'Overwrite':'Incrementaly'} " + cmdArgs.join(" ")
		    			classpath sourceSets.main.runtimeClasspath.asPath
	   					main = "com.ibm.broker.config.util.Deploy"
	               		args = cmdArgs
		    		}
		    		ext."deployBar-${bar}-${exgroup}" = os.toString()
		    	}
			}		    	
	    }		 
   		deployBars.dependsOn "deployBar-${bar}-${exgroup}"
   }
}