/*
*	Copyright 2015 rockit.consulting GbR  (www.rockit.consulting)
*
*/


ext {
}





/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*        					Read Bars parrallel and sequential and detect delta                                                 */
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/





task cleanPropsInBuild << {
   description "Cleans properties workspace"
   new File("${buildDir}${fileSeparator}bar.properties${fileSeparator}in").deleteDir()
   barPropertiesIn.mkdirs()
   barPropertiesOut.mkdirs()
}




task readBars(dependsOn:["doReadBars"]) 



//No parallel execution by file writing, due to performance dropdowns
/*
task readBars(dependsOn:["doReadBars${parallel}"]) << {
	bars.each { bar ->
		if( "${ant.project.properties}.${bar.name}" ) {
			logger.lifecycle "writing ${bar.name} to ${barPropertiesIn}${fileSeparator}${bar.name}.properties"
			new File("${barPropertiesIn}${fileSeparator}${bar.name}.properties").withWriter('UTF-8') { fileWriter ->
				"${ant.project.properties}.${bar.name}".writeTo(fileWriter)
			}
		}		

	}
} 
*/	



task doReadBars(dependsOn:[cleanPropsInBuild, findBarFiles,prepareBroker])

bars.each { bar ->
	 task "readBar-${bar}"<< {
	        def result = javaexec {
      	           logger.lifecycle "writing ${bar} to ${barPropertiesIn}${fileSeparator}${bar}.properties"
			       classpath sourceSets.main.runtimeClasspath.asPath
			       main = "com.ibm.broker.config.util.ReadBar"
			       args = ["-runtime", "-b", "${barByName(bar)}","-r"]
	               standardOutput = new FileOutputStream("${barPropertiesIn}${fileSeparator}${bar}.properties")
			}	        
	   }
	   doReadBars.dependsOn "readBar-${bar}"	 
}





task doReadBarsParallel(dependsOn:[findBarFiles,prepareBroker]) << {
    ant.parallel(threadsPerProcessor: 1) {
		bars.each { bar ->
	    		ant.java(outputproperty: "${bar}", fork:'true',failonerror:'yes',classname:"com.ibm.broker.config.util.ReadBar",classpath:sourceSets.main.runtimeClasspath.asPath) {
					arg(line:"-runtime -b ${barByName(bar)} -r")
				}
        }
    }
    
    
}



/* strip empty properties, keep only key=values */
task stripBars(dependsOn:[readBars]) << {
   barPropertiesIn.listFiles().each { file ->
   	  def strip =  new File(barPropertiesIn.path+fileSeparator+file.name+'.strip') 
   	  file.eachLine { line ->
   	     if(line.contains('=')) { strip << line + lineSeparator }
   	  }
   	  file.delete()
   	  strip.renameTo(new File(file.path)) 
   	  strip.delete()
   }
}



/* combine empty properties, keep only key=values */
task combineBars(dependsOn:[stripBars]) << {
   def result = new File(barPropertiesIn.path+fileSeparator+'combined.bar.properties')
   
   barPropertiesIn.listFiles().each { file ->
   	  file.eachLine { line ->
   	     if(line.contains('=') && (result.length()==0 || !result.text.contains(line)) ) { 
   	     	result << line + lineSeparator 
   	     }
   	  }
   }
}


/* detect delta */
task deltaBars(dependsOn:[readBars, stripBars, combineBars]) << {
   description "detectDelta : check for not yet controlled properties"
   new File("${barPropertiesOut}${fileSeparator}flows.properties.ignore").delete()
   def root = new File("${brokerConfDir}${fileSeparator}flows.properties").text
   def delta = new File("${barPropertiesOut}${fileSeparator}flows.properties.ignore")	
   def ignore = new File("${brokerConfDir}${fileSeparator}flows.properties.ignore").text   
   new File("${barPropertiesIn.path}${fileSeparator}combined.bar.properties").eachLine { line ->
      def key = line.split('=')[0].trim()
   	  if( !root.contains(key) && !ignore.contains(key) ) { 
   	     if( !delta.exists() || !delta.text.contains(key) )
   	     delta << line.trim() + lineSeparator
   	     logger.error " delta detected: ${line.trim()} " 
   	  }
   }
   
   if(delta.exists()) {
      throw new  TaskExecutionException(it, new Throwable("delta detected. please configure delta in ${configPath}${fileSeparator}flows.properties.ignore file.  "))
   }
   logger.info "no confguration deltas detected."
}






